import { type NextPage } from "next";
import { useState } from "react";
import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";
import { z } from "zod";
import { api } from "~/utils/api";

import { Input } from "~/components/Input";
import { Button } from "~/components/Button";
import { FormGroup } from "~/components/FormGroup";

const validationSchema = z.object({
  prompt: z.string().nonempty(),
});

type ValidationSchema = z.infer<typeof validationSchema>;

const GeneratePage: NextPage = () => {
  const [form, setForm] = useState<ValidationSchema>({
    prompt: "",
  });

  const generateIcon = api.generate.generateIcon.useMutation({
    onSuccess: (data) => {
      console.log("mutation finished", data);
    },
  });

  const onSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    const data = validationSchema.parse(form);
    generateIcon.mutate(data);
  };

  const updateForm = (key: string) => {
    return function (e: React.ChangeEvent<HTMLInputElement>) {
      setForm((prev) => ({ ...prev, [key]: e.target.value }));
    };
  };

  const session = useSession();
  const isLoggedIn = session.status === "authenticated";

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center">
        {!isLoggedIn ? (
          <Button
            onClick={() => {
              signIn().catch(console.error);
            }}
            className="rounded bg-blue-400 px-4 py-4 text-white hover:bg-blue-500"
          >
            Login
          </Button>
        ) : (
          <Button
            onClick={() => {
              signOut().catch(console.error);
            }}
            className="rounded bg-blue-400 px-4 py-4 text-white hover:bg-blue-500"
          >
            Logout
          </Button>
        )}
        <form className="flex flex-col gap-4" onSubmit={onSubmit}>
          <FormGroup>
            <label htmlFor="prompt">Prompt</label>
            <Input
              value={form.prompt}
              id="prompt"
              placeholder="Write your prompt here..."
              onChange={updateForm("prompt")}
            />
          </FormGroup>
          <Button className="rounded bg-blue-400 px-4 py-4 text-white hover:bg-blue-500">
            Generate
          </Button>
        </form>
      </main>
    </>
  );
};

export default GeneratePage;
